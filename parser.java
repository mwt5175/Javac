
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Nov 17 23:32:00 EST 2014
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Mon Nov 17 23:32:00 EST 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\004\000\002\006\003\000\002\007" +
    "\007\000\002\027\004\000\002\027\003\000\002\026\004" +
    "\000\002\026\002\000\002\025\004\000\002\025\002\000" +
    "\002\031\003\000\002\031\002\000\002\024\013\000\002" +
    "\024\014\000\002\024\013\000\002\024\014\000\002\022" +
    "\005\000\002\022\003\000\002\023\004\000\002\023\006" +
    "\000\002\030\005\000\002\030\007\000\002\030\010\000" +
    "\002\030\007\000\002\003\004\000\002\003\003\000\002" +
    "\004\006\000\002\004\010\000\002\004\012\000\002\004" +
    "\007\000\002\004\011\000\002\004\007\000\002\004\007" +
    "\000\002\004\006\000\002\004\007\000\002\004\004\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\007\000\002\004\015\000\002\004\017\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\017\005\000\002\017\003\000\002\021\005\000\002" +
    "\021\003\000\002\020\005\000\002\020\003\000\002\005" +
    "\005\000\002\005\005\000\002\005\003\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\003\000\002" +
    "\013\005\000\002\013\005\000\002\013\003\000\002\014" +
    "\005\000\002\014\005\000\002\014\003\000\002\015\004" +
    "\000\002\015\006\000\002\015\004\000\002\015\004\000" +
    "\002\015\004\000\002\015\004\000\002\015\003\000\002" +
    "\011\003\000\002\011\005\000\002\011\006\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\005\000\002\016\003\000" +
    "\002\016\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\004\034\005\001\002\000\004\002\345\001" +
    "\002\000\004\004\006\001\002\000\060\005\000\006\000" +
    "\007\000\010\000\011\000\013\000\014\000\040\000\041" +
    "\000\043\000\044\000\045\000\046\000\047\000\050\000" +
    "\051\000\052\000\053\000\054\000\055\000\056\000\057" +
    "\000\060\000\001\002\000\004\011\010\001\002\000\016" +
    "\012\ufff9\022\014\027\015\030\013\033\021\036\011\001" +
    "\002\000\006\004\uffd3\007\uffd3\001\002\000\004\012\ufffd" +
    "\001\002\000\004\004\006\001\002\000\006\004\uffd2\007" +
    "\uffd2\001\002\000\004\004\006\001\002\000\014\012\ufff9" +
    "\022\014\027\015\033\021\036\011\001\002\000\016\012" +
    "\ufff9\022\014\027\015\030\013\033\021\036\011\001\002" +
    "\000\004\004\006\001\002\000\006\004\uffd4\007\uffd4\001" +
    "\002\000\004\012\023\001\002\000\004\002\uffff\001\002" +
    "\000\012\005\025\006\026\010\030\040\027\001\002\000" +
    "\046\004\uffee\011\uffee\012\uffee\015\uffee\021\uffee\022\uffee" +
    "\023\uffee\025\uffee\027\uffee\030\uffee\032\uffee\033\uffee\035" +
    "\uffee\036\uffee\037\uffee\045\uffee\056\uffee\062\uffee\001\002" +
    "\000\012\007\133\022\014\033\021\036\011\001\002\000" +
    "\004\020\130\001\002\000\026\004\006\006\036\016\032" +
    "\017\034\020\041\024\031\026\050\042\033\045\040\056" +
    "\047\001\002\000\042\005\uffad\007\uffad\013\uffad\014\uffad" +
    "\041\uffad\043\uffad\044\uffad\046\uffad\047\uffad\050\uffad\051" +
    "\uffad\052\uffad\054\uffad\055\uffad\057\uffad\060\uffad\001\002" +
    "\000\042\005\uffaf\007\uffaf\013\uffaf\014\uffaf\041\uffaf\043" +
    "\uffaf\044\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf" +
    "\054\uffaf\055\uffaf\057\uffaf\060\uffaf\001\002\000\026\004" +
    "\006\006\036\016\032\017\034\020\041\024\031\026\050" +
    "\042\033\045\040\056\047\001\002\000\042\005\uffb0\007" +
    "\uffb0\013\uffb0\014\uffb0\041\uffb0\043\uffb0\044\uffb0\046\uffb0" +
    "\047\uffb0\050\uffb0\051\uffb0\052\uffb0\054\uffb0\055\uffb0\057" +
    "\uffb0\060\uffb0\001\002\000\010\005\126\050\061\054\060" +
    "\001\002\000\034\004\006\006\036\016\032\017\034\020" +
    "\041\022\014\024\031\026\050\033\021\036\011\042\033" +
    "\045\040\056\047\001\002\000\042\005\uffbc\007\uffbc\013" +
    "\uffbc\014\uffbc\041\uffbc\043\uffbc\044\uffbc\046\uffbc\047\uffbc" +
    "\050\uffbc\051\uffbc\052\uffbc\054\uffbc\055\uffbc\057\uffbc\060" +
    "\uffbc\001\002\000\004\004\006\001\002\000\042\005\uffb1" +
    "\007\uffb1\013\uffb1\014\uffb1\041\uffb1\043\uffb1\044\uffb1\046" +
    "\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\054\uffb1\055\uffb1" +
    "\057\uffb1\060\uffb1\001\002\000\054\005\uffab\006\111\007" +
    "\uffab\010\uffab\013\uffab\014\uffab\040\056\041\uffab\043\uffab" +
    "\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052" +
    "\uffab\054\uffab\055\uffab\056\uffab\057\uffab\060\uffab\001\002" +
    "\000\042\005\uffbf\007\uffbf\013\uffbf\014\uffbf\041\076\043" +
    "\uffbf\044\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\077" +
    "\054\uffbf\055\uffbf\057\uffbf\060\uffbf\001\002\000\042\005" +
    "\uffb5\007\uffb5\013\uffb5\014\uffb5\041\uffb5\043\uffb5\044\uffb5" +
    "\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\054\uffb5\055" +
    "\uffb5\057\uffb5\060\uffb5\001\002\000\036\005\uffc2\007\uffc2" +
    "\013\071\014\074\043\066\044\uffc2\046\070\047\uffc2\050" +
    "\uffc2\051\065\054\uffc2\055\072\057\067\060\073\001\002" +
    "\000\016\005\uffc9\007\uffc9\044\uffc9\047\uffc9\050\uffc9\054" +
    "\uffc9\001\002\000\004\004\006\001\002\000\042\005\uffae" +
    "\007\uffae\013\uffae\014\uffae\041\uffae\043\uffae\044\uffae\046" +
    "\uffae\047\uffae\050\uffae\051\uffae\052\uffae\054\uffae\055\uffae" +
    "\057\uffae\060\uffae\001\002\000\046\005\uffb4\007\uffb4\013" +
    "\uffb4\014\uffb4\041\uffb4\043\uffb4\044\uffb4\045\052\046\uffb4" +
    "\047\uffb4\050\uffb4\051\uffb4\052\uffb4\054\uffb4\055\uffb4\056" +
    "\053\057\uffb4\060\uffb4\001\002\000\042\005\uffb9\007\uffb9" +
    "\013\uffb9\014\uffb9\041\uffb9\043\uffb9\044\uffb9\046\uffb9\047" +
    "\uffb9\050\uffb9\051\uffb9\052\uffb9\054\uffb9\055\uffb9\057\uffb9" +
    "\060\uffb9\001\002\000\042\005\uffb8\007\uffb8\013\uffb8\014" +
    "\uffb8\041\uffb8\043\uffb8\044\uffb8\046\uffb8\047\uffb8\050\uffb8" +
    "\051\uffb8\052\uffb8\054\uffb8\055\uffb8\057\uffb8\060\uffb8\001" +
    "\002\000\042\005\uffb6\007\uffb6\013\uffb6\014\uffb6\041\uffb6" +
    "\043\uffb6\044\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052" +
    "\uffb6\054\uffb6\055\uffb6\057\uffb6\060\uffb6\001\002\000\046" +
    "\005\uffab\007\uffab\010\uffab\013\uffab\014\uffab\040\056\041" +
    "\uffab\043\uffab\044\uffab\046\uffab\047\uffab\050\uffab\051\uffab" +
    "\052\uffab\054\uffab\055\uffab\057\uffab\060\uffab\001\002\000" +
    "\026\004\006\006\036\016\032\017\034\020\041\024\031" +
    "\026\050\042\033\045\040\056\047\001\002\000\010\047" +
    "\062\050\061\054\060\001\002\000\026\004\006\006\036" +
    "\016\032\017\034\020\041\024\031\026\050\042\033\045" +
    "\040\056\047\001\002\000\026\004\006\006\036\016\032" +
    "\017\034\020\041\024\031\026\050\042\033\045\040\056" +
    "\047\001\002\000\050\005\uffaa\007\uffaa\010\uffaa\013\uffaa" +
    "\014\uffaa\041\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047" +
    "\uffaa\050\uffaa\051\uffaa\052\uffaa\054\uffaa\055\uffaa\056\uffaa" +
    "\057\uffaa\060\uffaa\001\002\000\016\005\uffcb\007\uffcb\044" +
    "\uffcb\047\uffcb\050\uffcb\054\uffcb\001\002\000\016\005\uffca" +
    "\007\uffca\044\uffca\047\uffca\050\uffca\054\uffca\001\002\000" +
    "\026\004\006\006\036\016\032\017\034\020\041\024\031" +
    "\026\050\042\033\045\040\056\047\001\002\000\026\004" +
    "\006\006\036\016\032\017\034\020\041\024\031\026\050" +
    "\042\033\045\040\056\047\001\002\000\026\004\006\006" +
    "\036\016\032\017\034\020\041\024\031\026\050\042\033" +
    "\045\040\056\047\001\002\000\026\004\006\006\036\016" +
    "\032\017\034\020\041\024\031\026\050\042\033\045\040" +
    "\056\047\001\002\000\026\004\006\006\036\016\032\017" +
    "\034\020\041\024\031\026\050\042\033\045\040\056\047" +
    "\001\002\000\026\004\006\006\036\016\032\017\034\020" +
    "\041\024\031\026\050\042\033\045\040\056\047\001\002" +
    "\000\026\004\006\006\036\016\032\017\034\020\041\024" +
    "\031\026\050\042\033\045\040\056\047\001\002\000\026" +
    "\004\006\006\036\016\032\017\034\020\041\024\031\026" +
    "\050\042\033\045\040\056\047\001\002\000\042\005\uffc0" +
    "\007\uffc0\013\uffc0\014\uffc0\041\076\043\uffc0\044\uffc0\046" +
    "\uffc0\047\uffc0\050\uffc0\051\uffc0\052\077\054\uffc0\055\uffc0" +
    "\057\uffc0\060\uffc0\001\002\000\026\004\006\006\036\016" +
    "\032\017\034\020\041\024\031\026\050\042\033\045\040" +
    "\056\047\001\002\000\026\004\006\006\036\016\032\017" +
    "\034\020\041\024\031\026\050\042\033\045\040\056\047" +
    "\001\002\000\042\005\uffbe\007\uffbe\013\uffbe\014\uffbe\041" +
    "\uffbe\043\uffbe\044\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe" +
    "\052\uffbe\054\uffbe\055\uffbe\057\uffbe\060\uffbe\001\002\000" +
    "\042\005\uffbd\007\uffbd\013\uffbd\014\uffbd\041\uffbd\043\uffbd" +
    "\044\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\054" +
    "\uffbd\055\uffbd\057\uffbd\060\uffbd\001\002\000\022\005\uffc3" +
    "\007\uffc3\013\071\014\074\044\uffc3\047\uffc3\050\uffc3\054" +
    "\uffc3\001\002\000\022\005\uffc6\007\uffc6\013\071\014\074" +
    "\044\uffc6\047\uffc6\050\uffc6\054\uffc6\001\002\000\042\005" +
    "\uffc1\007\uffc1\013\uffc1\014\uffc1\041\076\043\uffc1\044\uffc1" +
    "\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052\077\054\uffc1\055" +
    "\uffc1\057\uffc1\060\uffc1\001\002\000\022\005\uffc5\007\uffc5" +
    "\013\071\014\074\044\uffc5\047\uffc5\050\uffc5\054\uffc5\001" +
    "\002\000\022\005\uffc7\007\uffc7\013\071\014\074\044\uffc7" +
    "\047\uffc7\050\uffc7\054\uffc7\001\002\000\022\005\uffc8\007" +
    "\uffc8\013\071\014\074\044\uffc8\047\uffc8\050\uffc8\054\uffc8" +
    "\001\002\000\022\005\uffc4\007\uffc4\013\071\014\074\044" +
    "\uffc4\047\uffc4\050\uffc4\054\uffc4\001\002\000\030\004\006" +
    "\006\036\007\113\016\032\017\034\020\041\024\031\026" +
    "\050\042\033\045\040\056\047\001\002\000\004\007\117" +
    "\001\002\000\042\005\uffb3\007\uffb3\013\uffb3\014\uffb3\041" +
    "\uffb3\043\uffb3\044\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3" +
    "\052\uffb3\054\uffb3\055\uffb3\057\uffb3\060\uffb3\001\002\000" +
    "\012\007\uffd0\044\115\050\061\054\060\001\002\000\026" +
    "\004\006\006\036\016\032\017\034\020\041\024\031\026" +
    "\050\042\033\045\040\056\047\001\002\000\004\007\uffd1" +
    "\001\002\000\042\005\uffb2\007\uffb2\013\uffb2\014\uffb2\041" +
    "\uffb2\043\uffb2\044\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2" +
    "\052\uffb2\054\uffb2\055\uffb2\057\uffb2\060\uffb2\001\002\000" +
    "\042\005\uffb7\007\uffb7\013\uffb7\014\uffb7\041\uffb7\043\uffb7" +
    "\044\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\054" +
    "\uffb7\055\uffb7\057\uffb7\060\uffb7\001\002\000\004\007\124" +
    "\001\002\000\010\007\123\050\061\054\060\001\002\000" +
    "\042\005\uffac\007\uffac\013\uffac\014\uffac\041\uffac\043\uffac" +
    "\044\uffac\046\uffac\047\uffac\050\uffac\051\uffac\052\uffac\054" +
    "\uffac\055\uffac\057\uffac\060\uffac\001\002\000\026\004\006" +
    "\006\036\016\032\017\034\020\041\024\031\026\050\042" +
    "\033\045\040\056\047\001\002\000\042\005\uffba\007\uffba" +
    "\013\uffba\014\uffba\041\uffba\043\uffba\044\uffba\046\uffba\047" +
    "\uffba\050\uffba\051\uffba\052\uffba\054\uffba\055\uffba\057\uffba" +
    "\060\uffba\001\002\000\046\004\uffed\011\uffed\012\uffed\015" +
    "\uffed\021\uffed\022\uffed\023\uffed\025\uffed\027\uffed\030\uffed" +
    "\032\uffed\033\uffed\035\uffed\036\uffed\037\uffed\045\uffed\056" +
    "\uffed\062\uffed\001\002\000\042\005\uffbb\007\uffbb\013\uffbb" +
    "\014\uffbb\041\uffbb\043\uffbb\044\uffbb\046\uffbb\047\uffbb\050" +
    "\uffbb\051\uffbb\052\uffbb\054\uffbb\055\uffbb\057\uffbb\060\uffbb" +
    "\001\002\000\004\047\131\001\002\000\004\005\132\001" +
    "\002\000\046\004\uffec\011\uffec\012\uffec\015\uffec\021\uffec" +
    "\022\uffec\023\uffec\025\uffec\027\uffec\030\uffec\032\uffec\033" +
    "\uffec\035\uffec\036\uffec\037\uffec\045\uffec\056\uffec\062\uffec" +
    "\001\002\000\004\011\311\001\002\000\004\007\144\001" +
    "\002\000\004\004\006\001\002\000\006\007\ufff1\044\137" +
    "\001\002\000\010\022\014\033\021\036\011\001\002\000" +
    "\004\007\ufff2\001\002\000\010\007\ufff0\040\142\044\ufff0" +
    "\001\002\000\004\047\143\001\002\000\006\007\uffef\044" +
    "\uffef\001\002\000\004\011\145\001\002\000\042\004\ufffb" +
    "\011\ufffb\015\ufffb\021\ufffb\022\014\023\ufffb\025\ufffb\030" +
    "\013\032\ufffb\033\021\035\ufffb\036\011\037\ufffb\045\ufffb" +
    "\056\ufffb\062\ufffb\001\002\000\032\004\006\011\157\015" +
    "\160\021\164\023\165\025\167\032\155\035\162\037\153" +
    "\045\166\056\170\062\171\001\002\000\004\004\006\001" +
    "\002\000\042\004\ufffb\011\ufffb\015\ufffb\021\ufffb\022\014" +
    "\023\ufffb\025\ufffb\030\013\032\ufffb\033\021\035\ufffb\036" +
    "\011\037\ufffb\045\ufffb\056\ufffb\062\ufffb\001\002\000\032" +
    "\004\ufffc\011\ufffc\015\ufffc\021\ufffc\023\ufffc\025\ufffc\032" +
    "\ufffc\035\ufffc\037\ufffc\045\ufffc\056\ufffc\062\ufffc\001\002" +
    "\000\010\005\025\010\030\040\027\001\002\000\004\004" +
    "\006\001\002\000\004\012\305\001\002\000\004\006\276" +
    "\001\002\000\010\010\271\045\267\056\270\001\002\000" +
    "\042\004\ufffb\011\ufffb\015\ufffb\021\ufffb\022\014\023\ufffb" +
    "\025\ufffb\030\013\032\ufffb\033\021\035\ufffb\036\011\037" +
    "\ufffb\045\ufffb\056\ufffb\062\ufffb\001\002\000\004\006\252" +
    "\001\002\000\040\004\006\011\157\012\uffe9\015\160\021" +
    "\164\023\165\025\167\031\uffe9\032\155\035\162\037\153" +
    "\045\166\056\170\061\uffe9\062\171\001\002\000\030\004" +
    "\006\005\246\006\036\016\032\017\034\020\041\024\031" +
    "\026\050\042\033\045\040\056\047\001\002\000\016\006" +
    "\233\010\uffab\040\056\045\uffab\053\232\056\uffab\001\002" +
    "\000\004\006\226\001\002\000\004\004\006\001\002\000" +
    "\004\004\006\001\002\000\004\006\213\001\002\000\004" +
    "\004\006\001\002\000\004\006\172\001\002\000\004\004" +
    "\006\001\002\000\004\010\174\001\002\000\026\004\006" +
    "\006\036\016\032\017\034\020\041\024\031\026\050\042" +
    "\033\045\040\056\047\001\002\000\010\005\176\050\061" +
    "\054\060\001\002\000\026\004\006\006\036\016\032\017" +
    "\034\020\041\024\031\026\050\042\033\045\040\056\047" +
    "\001\002\000\010\005\200\050\061\054\060\001\002\000" +
    "\026\004\006\006\036\016\032\017\034\020\041\024\031" +
    "\026\050\042\033\045\040\056\047\001\002\000\010\007" +
    "\207\050\061\054\060\001\002\000\042\007\uffb4\010\203" +
    "\013\uffb4\014\uffb4\041\uffb4\043\uffb4\045\052\046\uffb4\050" +
    "\uffb4\051\uffb4\052\uffb4\054\uffb4\055\uffb4\056\053\057\uffb4" +
    "\060\uffb4\001\002\000\026\004\006\006\036\016\032\017" +
    "\034\020\041\024\031\026\050\042\033\045\040\056\047" +
    "\001\002\000\010\007\205\050\061\054\060\001\002\000" +
    "\032\004\006\011\157\015\160\021\164\023\165\025\167" +
    "\032\155\035\162\037\153\045\166\056\170\062\171\001" +
    "\002\000\040\004\uffd9\011\uffd9\012\uffd9\015\uffd9\021\uffd9" +
    "\023\uffd9\025\uffd9\031\uffd9\032\uffd9\035\uffd9\037\uffd9\045" +
    "\uffd9\056\uffd9\061\uffd9\062\uffd9\001\002\000\032\004\006" +
    "\011\157\015\160\021\164\023\165\025\167\032\155\035" +
    "\162\037\153\045\166\056\170\062\171\001\002\000\040" +
    "\004\uffda\011\uffda\012\uffda\015\uffda\021\uffda\023\uffda\025" +
    "\uffda\031\uffda\032\uffda\035\uffda\037\uffda\045\uffda\056\uffda" +
    "\061\uffda\062\uffda\001\002\000\004\005\212\001\002\000" +
    "\040\004\uffd7\011\uffd7\012\uffd7\015\uffd7\021\uffd7\023\uffd7" +
    "\025\uffd7\031\uffd7\032\uffd7\035\uffd7\037\uffd7\045\uffd7\056" +
    "\uffd7\061\uffd7\062\uffd7\001\002\000\026\004\006\006\036" +
    "\016\032\017\034\020\041\024\031\026\050\042\033\045" +
    "\040\056\047\001\002\000\004\007\220\001\002\000\012" +
    "\007\uffcc\044\216\050\061\054\060\001\002\000\026\004" +
    "\006\006\036\016\032\017\034\020\041\024\031\026\050" +
    "\042\033\045\040\056\047\001\002\000\004\007\uffcd\001" +
    "\002\000\004\005\221\001\002\000\040\004\uffe2\011\uffe2" +
    "\012\uffe2\015\uffe2\021\uffe2\023\uffe2\025\uffe2\031\uffe2\032" +
    "\uffe2\035\uffe2\037\uffe2\045\uffe2\056\uffe2\061\uffe2\062\uffe2" +
    "\001\002\000\004\005\223\001\002\000\040\004\uffd8\011" +
    "\uffd8\012\uffd8\015\uffd8\021\uffd8\023\uffd8\025\uffd8\031\uffd8" +
    "\032\uffd8\035\uffd8\037\uffd8\045\uffd8\056\uffd8\061\uffd8\062" +
    "\uffd8\001\002\000\004\005\225\001\002\000\040\004\uffdc" +
    "\011\uffdc\012\uffdc\015\uffdc\021\uffdc\023\uffdc\025\uffdc\031" +
    "\uffdc\032\uffdc\035\uffdc\037\uffdc\045\uffdc\056\uffdc\061\uffdc" +
    "\062\uffdc\001\002\000\026\004\006\006\036\016\032\017" +
    "\034\020\041\024\031\026\050\042\033\045\040\056\047" +
    "\001\002\000\010\007\230\050\061\054\060\001\002\000" +
    "\032\004\006\011\157\015\160\021\164\023\165\025\167" +
    "\032\155\035\162\037\153\045\166\056\170\062\171\001" +
    "\002\000\040\004\uffe5\011\uffe5\012\uffe5\015\uffe5\021\uffe5" +
    "\023\uffe5\025\uffe5\031\uffe5\032\uffe5\035\uffe5\037\uffe5\045" +
    "\uffe5\056\uffe5\061\uffe5\062\uffe5\001\002\000\004\021\241" +
    "\001\002\000\030\004\006\006\036\007\235\016\032\017" +
    "\034\020\041\024\031\026\050\042\033\045\040\056\047" +
    "\001\002\000\004\007\237\001\002\000\004\005\236\001" +
    "\002\000\040\004\uffe1\011\uffe1\012\uffe1\015\uffe1\021\uffe1" +
    "\023\uffe1\025\uffe1\031\uffe1\032\uffe1\035\uffe1\037\uffe1\045" +
    "\uffe1\056\uffe1\061\uffe1\062\uffe1\001\002\000\004\005\240" +
    "\001\002\000\040\004\uffe0\011\uffe0\012\uffe0\015\uffe0\021" +
    "\uffe0\023\uffe0\025\uffe0\031\uffe0\032\uffe0\035\uffe0\037\uffe0" +
    "\045\uffe0\056\uffe0\061\uffe0\062\uffe0\001\002\000\004\006" +
    "\242\001\002\000\026\004\006\006\036\016\032\017\034" +
    "\020\041\024\031\026\050\042\033\045\040\056\047\001" +
    "\002\000\010\007\244\050\061\054\060\001\002\000\032" +
    "\004\006\011\157\015\160\021\164\023\165\025\167\032" +
    "\155\035\162\037\153\045\166\056\170\062\171\001\002" +
    "\000\040\004\uffe4\011\uffe4\012\uffe4\015\uffe4\021\uffe4\023" +
    "\uffe4\025\uffe4\031\uffe4\032\uffe4\035\uffe4\037\uffe4\045\uffe4" +
    "\056\uffe4\061\uffe4\062\uffe4\001\002\000\040\004\uffdf\011" +
    "\uffdf\012\uffdf\015\uffdf\021\uffdf\023\uffdf\025\uffdf\031\uffdf" +
    "\032\uffdf\035\uffdf\037\uffdf\045\uffdf\056\uffdf\061\uffdf\062" +
    "\uffdf\001\002\000\010\005\250\050\061\054\060\001\002" +
    "\000\040\004\uffde\011\uffde\012\uffde\015\uffde\021\uffde\023" +
    "\uffde\025\uffde\031\uffde\032\uffde\035\uffde\037\uffde\045\uffde" +
    "\056\uffde\061\uffde\062\uffde\001\002\000\010\012\uffea\031" +
    "\uffea\061\uffea\001\002\000\026\004\006\006\036\016\032" +
    "\017\034\020\041\024\031\026\050\042\033\045\040\056" +
    "\047\001\002\000\010\007\254\050\061\054\060\001\002" +
    "\000\032\004\006\011\157\015\160\021\164\023\165\025" +
    "\167\032\155\035\162\037\153\045\166\056\170\062\171" +
    "\001\002\000\006\031\257\061\256\001\002\000\040\004" +
    "\uffe7\011\uffe7\012\uffe7\015\uffe7\021\uffe7\023\uffe7\025\uffe7" +
    "\031\uffe7\032\uffe7\035\uffe7\037\uffe7\045\uffe7\056\uffe7\061" +
    "\uffe7\062\uffe7\001\002\000\032\004\006\011\157\015\160" +
    "\021\164\023\165\025\167\032\155\035\162\037\153\045" +
    "\166\056\170\062\171\001\002\000\004\061\261\001\002" +
    "\000\040\004\uffe6\011\uffe6\012\uffe6\015\uffe6\021\uffe6\023" +
    "\uffe6\025\uffe6\031\uffe6\032\uffe6\035\uffe6\037\uffe6\045\uffe6" +
    "\056\uffe6\061\uffe6\062\uffe6\001\002\000\032\004\006\011" +
    "\157\015\160\021\164\023\165\025\167\032\155\035\162" +
    "\037\153\045\166\056\170\062\171\001\002\000\004\012" +
    "\264\001\002\000\042\004\ufff7\005\266\011\ufff7\012\ufff7" +
    "\015\ufff7\021\ufff7\023\ufff7\025\ufff7\031\ufff7\032\ufff7\035" +
    "\ufff7\037\ufff7\045\ufff7\056\ufff7\061\ufff7\062\ufff7\001\002" +
    "\000\040\004\uffdb\011\uffdb\012\uffdb\015\uffdb\021\uffdb\023" +
    "\uffdb\025\uffdb\031\uffdb\032\uffdb\035\uffdb\037\uffdb\045\uffdb" +
    "\056\uffdb\061\uffdb\062\uffdb\001\002\000\050\004\ufff8\011" +
    "\ufff8\012\ufff8\015\ufff8\021\ufff8\022\ufff8\023\ufff8\025\ufff8" +
    "\027\ufff8\031\ufff8\032\ufff8\033\ufff8\035\ufff8\036\ufff8\037" +
    "\ufff8\045\ufff8\056\ufff8\061\ufff8\062\ufff8\001\002\000\004" +
    "\005\275\001\002\000\004\005\274\001\002\000\026\004" +
    "\006\006\036\016\032\017\034\020\041\024\031\026\050" +
    "\042\033\045\040\056\047\001\002\000\010\005\273\050" +
    "\061\054\060\001\002\000\040\004\uffe8\011\uffe8\012\uffe8" +
    "\015\uffe8\021\uffe8\023\uffe8\025\uffe8\031\uffe8\032\uffe8\035" +
    "\uffe8\037\uffe8\045\uffe8\056\uffe8\061\uffe8\062\uffe8\001\002" +
    "\000\040\004\uffd5\011\uffd5\012\uffd5\015\uffd5\021\uffd5\023" +
    "\uffd5\025\uffd5\031\uffd5\032\uffd5\035\uffd5\037\uffd5\045\uffd5" +
    "\056\uffd5\061\uffd5\062\uffd5\001\002\000\040\004\uffd6\011" +
    "\uffd6\012\uffd6\015\uffd6\021\uffd6\023\uffd6\025\uffd6\031\uffd6" +
    "\032\uffd6\035\uffd6\037\uffd6\045\uffd6\056\uffd6\061\uffd6\062" +
    "\uffd6\001\002\000\004\004\006\001\002\000\004\007\303" +
    "\001\002\000\006\007\uffce\044\301\001\002\000\004\004" +
    "\006\001\002\000\004\007\uffcf\001\002\000\004\005\304" +
    "\001\002\000\040\004\uffe3\011\uffe3\012\uffe3\015\uffe3\021" +
    "\uffe3\023\uffe3\025\uffe3\031\uffe3\032\uffe3\035\uffe3\037\uffe3" +
    "\045\uffe3\056\uffe3\061\uffe3\062\uffe3\001\002\000\016\005" +
    "\266\012\ufff7\022\ufff7\027\ufff7\033\ufff7\036\ufff7\001\002" +
    "\000\014\012\ufff3\022\ufff3\027\ufff3\033\ufff3\036\ufff3\001" +
    "\002\000\004\005\310\001\002\000\040\004\uffdd\011\uffdd" +
    "\012\uffdd\015\uffdd\021\uffdd\023\uffdd\025\uffdd\031\uffdd\032" +
    "\uffdd\035\uffdd\037\uffdd\045\uffdd\056\uffdd\061\uffdd\062\uffdd" +
    "\001\002\000\042\004\ufffb\011\ufffb\015\ufffb\021\ufffb\022" +
    "\014\023\ufffb\025\ufffb\030\013\032\ufffb\033\021\035\ufffb" +
    "\036\011\037\ufffb\045\ufffb\056\ufffb\062\ufffb\001\002\000" +
    "\032\004\006\011\157\015\160\021\164\023\165\025\167" +
    "\032\155\035\162\037\153\045\166\056\170\062\171\001" +
    "\002\000\004\012\314\001\002\000\016\005\266\012\ufff7" +
    "\022\ufff7\027\ufff7\033\ufff7\036\ufff7\001\002\000\014\012" +
    "\ufff4\022\ufff4\027\ufff4\033\ufff4\036\ufff4\001\002\000\004" +
    "\012\ufffe\001\002\000\004\004\006\001\002\000\004\012" +
    "\ufffa\001\002\000\004\006\026\001\002\000\004\006\323" +
    "\001\002\000\012\007\324\022\014\033\021\036\011\001" +
    "\002\000\004\011\334\001\002\000\004\007\326\001\002" +
    "\000\004\011\327\001\002\000\042\004\ufffb\011\ufffb\015" +
    "\ufffb\021\ufffb\022\014\023\ufffb\025\ufffb\030\013\032\ufffb" +
    "\033\021\035\ufffb\036\011\037\ufffb\045\ufffb\056\ufffb\062" +
    "\ufffb\001\002\000\032\004\006\011\157\015\160\021\164" +
    "\023\165\025\167\032\155\035\162\037\153\045\166\056" +
    "\170\062\171\001\002\000\004\012\332\001\002\000\016" +
    "\005\266\012\ufff7\022\ufff7\027\ufff7\033\ufff7\036\ufff7\001" +
    "\002\000\014\012\ufff5\022\ufff5\027\ufff5\033\ufff5\036\ufff5" +
    "\001\002\000\042\004\ufffb\011\ufffb\015\ufffb\021\ufffb\022" +
    "\014\023\ufffb\025\ufffb\030\013\032\ufffb\033\021\035\ufffb" +
    "\036\011\037\ufffb\045\ufffb\056\ufffb\062\ufffb\001\002\000" +
    "\032\004\006\011\157\015\160\021\164\023\165\025\167" +
    "\032\155\035\162\037\153\045\166\056\170\062\171\001" +
    "\002\000\004\012\337\001\002\000\016\005\266\012\ufff7" +
    "\022\ufff7\027\ufff7\033\ufff7\036\ufff7\001\002\000\014\012" +
    "\ufff6\022\ufff6\027\ufff6\033\ufff6\036\ufff6\001\002\000\004" +
    "\010\342\001\002\000\026\004\006\006\036\016\032\017" +
    "\034\020\041\024\031\026\050\042\033\045\040\056\047" +
    "\001\002\000\010\005\344\050\061\054\060\001\002\000" +
    "\046\004\uffeb\011\uffeb\012\uffeb\015\uffeb\021\uffeb\022\uffeb" +
    "\023\uffeb\025\uffeb\027\uffeb\030\uffeb\032\uffeb\033\uffeb\035" +
    "\uffeb\036\uffeb\037\uffeb\045\uffeb\056\uffeb\062\uffeb\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\004\007\003\001\001\000\002\001\001\000" +
    "\004\006\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\010\017\024\015\025\011\027\021\030\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\340" +
    "\001\001\000\002\001\001\000\004\006\321\001\001\000" +
    "\010\010\316\024\015\025\317\001\001\000\014\010\017" +
    "\024\015\025\011\027\315\030\016\001\001\000\004\006" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\134\022\133\023\135\001\001\000\002\001\001\000\022" +
    "\005\034\006\041\011\043\012\045\013\044\014\042\015" +
    "\036\016\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\006\041\011\043\015\126\016\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\005\121\006\041" +
    "\010\120\011\043\012\045\013\044\014\042\015\036\016" +
    "\050\001\001\000\002\001\001\000\006\006\054\016\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\054\016\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\005\056\006\041\011" +
    "\043\012\045\013\044\014\042\015\036\016\050\001\001" +
    "\000\002\001\001\000\020\006\041\011\043\012\063\013" +
    "\044\014\042\015\036\016\050\001\001\000\020\006\041" +
    "\011\043\012\062\013\044\014\042\015\036\016\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\006\041\011\043\013\107\014\042\015\036\016" +
    "\050\001\001\000\016\006\041\011\043\013\106\014\042" +
    "\015\036\016\050\001\001\000\016\006\041\011\043\013" +
    "\105\014\042\015\036\016\050\001\001\000\016\006\041" +
    "\011\043\013\104\014\042\015\036\016\050\001\001\000" +
    "\014\006\041\011\043\014\103\015\036\016\050\001\001" +
    "\000\016\006\041\011\043\013\102\014\042\015\036\016" +
    "\050\001\001\000\016\006\041\011\043\013\101\014\042" +
    "\015\036\016\050\001\001\000\014\006\041\011\043\014" +
    "\074\015\036\016\050\001\001\000\002\001\001\000\012" +
    "\006\041\011\043\015\100\016\050\001\001\000\012\006" +
    "\041\011\043\015\077\016\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\005\113\006\041\011" +
    "\043\012\045\013\044\014\042\015\036\016\050\017\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\005\113\006\041\011\043\012\045\013\044" +
    "\014\042\015\036\016\050\017\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\006\041\011" +
    "\043\015\124\016\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\140\001\001\000\002\001\001\000\010\010" +
    "\134\022\137\023\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\146\026\145\030\147\001\001\000\012" +
    "\003\153\004\160\006\162\016\155\001\001\000\004\006" +
    "\151\001\001\000\010\010\146\026\150\030\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\306\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\146\026\261\030\147\001\001\000\002\001" +
    "\001\000\012\003\250\004\160\006\162\016\155\001\001" +
    "\000\022\005\246\006\041\011\043\012\045\013\044\014" +
    "\042\015\036\016\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\223\001\001\000\006\006\054\016" +
    "\221\001\001\000\002\001\001\000\006\006\054\016\210" +
    "\001\001\000\002\001\001\000\006\006\054\016\172\001" +
    "\001\000\002\001\001\000\022\005\174\006\041\011\043" +
    "\012\045\013\044\014\042\015\036\016\050\001\001\000" +
    "\002\001\001\000\022\005\176\006\041\011\043\012\045" +
    "\013\044\014\042\015\036\016\050\001\001\000\002\001" +
    "\001\000\022\005\200\006\041\011\043\012\045\013\044" +
    "\014\042\015\036\016\201\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\005\203\006\041\011\043\012\045" +
    "\013\044\014\042\015\036\016\050\001\001\000\002\001" +
    "\001\000\010\004\205\006\162\016\155\001\001\000\002" +
    "\001\001\000\010\004\207\006\162\016\155\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\005\214\006\041\011\043\012\045\013\044\014\042\015" +
    "\036\016\050\020\213\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\005\214\006\041\011\043\012\045\013" +
    "\044\014\042\015\036\016\050\020\216\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\005\226\006\041\011\043\012\045\013\044\014" +
    "\042\015\036\016\050\001\001\000\002\001\001\000\010" +
    "\004\230\006\162\016\155\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\005\113\006\041\011\043\012\045" +
    "\013\044\014\042\015\036\016\050\017\233\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\005" +
    "\242\006\041\011\043\012\045\013\044\014\042\015\036" +
    "\016\050\001\001\000\002\001\001\000\010\004\244\006" +
    "\162\016\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\005\252\006\041\011\043\012\045\013\044\014\042" +
    "\015\036\016\050\001\001\000\002\001\001\000\012\003" +
    "\254\004\160\006\162\016\155\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\257\004\160\006\162\016" +
    "\155\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\262\004\160\006\162\016\155\001\001\000\002\001" +
    "\001\000\004\031\264\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\005" +
    "\271\006\041\011\043\012\045\013\044\014\042\015\036" +
    "\016\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\054\016\277" +
    "\021\276\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\054\016\277\021\301\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\305\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\146\026\311\030\147\001\001\000\012\003" +
    "\312\004\160\006\162\016\155\001\001\000\002\001\001" +
    "\000\004\031\314\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\320\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\134\022\324\023" +
    "\135\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\146\026\327\030\147\001\001\000" +
    "\012\003\330\004\160\006\162\016\155\001\001\000\002" +
    "\001\001\000\004\031\332\001\001\000\002\001\001\000" +
    "\010\010\146\026\334\030\147\001\001\000\012\003\335" +
    "\004\160\006\162\016\155\001\001\000\002\001\001\000" +
    "\004\031\337\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\005\342\006\041\011\043\012\045\013\044\014" +
    "\042\015\036\016\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
              
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return Scanner.next_token(); 
    }


 public void syntax_error(Symbol cur_token)
     {
 	  report_error("CSX syntax error at line "+
			String.valueOf(((CSXToken)cur_token.value).linenum),
			null);
     }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // name ::= ident LBRACKET exp RBRACKET 
            {
              nameNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new nameNode(i,e,i.linenum,i.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*name*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // name ::= ident 
            {
              nameNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new nameNode(i,new nullExprNode(),i.linenum,i.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*name*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // unit ::= LPAREN exp RPAREN 
            {
              exprNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*unit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // unit ::= rw_FALSE 
            {
              exprNode RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CSXToken s = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new falseNode (s.linenum,s.colnum ); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*unit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // unit ::= rw_TRUE 
            {
              exprNode RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CSXToken s = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new trueNode (s.linenum,s.colnum ); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*unit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // unit ::= STRLIT 
            {
              exprNode RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CSXStringLitToken s = (CSXStringLitToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new strLitNode(s.stringText, s.linenum, s.colnum ); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*unit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // unit ::= CHARLIT 
            {
              exprNode RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CSXCharLitToken s = (CSXCharLitToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new charLitNode (s.charValue, s.linenum,s.colnum ); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*unit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // unit ::= INTLIT 
            {
              exprNode RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CSXIntLitToken s = (CSXIntLitToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new intLitNode (s.intValue, s.linenum,s.colnum ); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*unit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // unit ::= ident LPAREN args RPAREN 
            {
              exprNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		argsNode a = (argsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new fctCallNode(i,a,i.linenum,i.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*unit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // unit ::= ident LPAREN RPAREN 
            {
              exprNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new fctCallNode(i,new nullArgsNode(),i.linenum,i.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*unit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // unit ::= name 
            {
              exprNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = n; 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*unit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // unary ::= unit 
            {
              exprNode RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode u = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=u; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*unary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // unary ::= DEC name 
            {
              exprNode RESULT = null;
		int preleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int preright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CSXToken pre = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new unaryOpNode(sym.DEC, n, pre.linenum, pre.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*unary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // unary ::= INC name 
            {
              exprNode RESULT = null;
		int preleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int preright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CSXToken pre = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new unaryOpNode(sym.INC, n, pre.linenum, pre.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*unary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // unary ::= name DEC 
            {
              exprNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new unaryOpNode(sym.DEC, n, n.linenum, n.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*unary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // unary ::= name INC 
            {
              exprNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new unaryOpNode(sym.INC, n, n.linenum, n.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*unary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // unary ::= LPAREN type RPAREN unary 
            {
              exprNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new castNode(t,e,t.linenum,t.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*unary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // unary ::= NOT unary 
            {
              exprNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new unaryOpNode(sym.NOT,e,e.linenum,e.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*unary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // pri ::= unary 
            {
              exprNode RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode u = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=u; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*pri*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // pri ::= pri SLASH unary 
            {
              exprNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode l = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CSXToken op = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode r = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new binaryOpNode(l,sym.SLASH,r,op.linenum,op.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*pri*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // pri ::= pri TIMES unary 
            {
              exprNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode l = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CSXToken op = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode r = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new binaryOpNode(l,sym.TIMES,r,op.linenum,op.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*pri*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // factor ::= pri 
            {
              exprNode RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode p = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=p; 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // factor ::= factor MINUS pri 
            {
              exprNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode l = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CSXToken op = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode r = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new binaryOpNode(l,sym.MINUS,r,op.linenum,op.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // factor ::= factor PLUS pri 
            {
              exprNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode l = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CSXToken op = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode r = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new binaryOpNode(l,sym.PLUS,r,op.linenum,op.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // term ::= factor 
            {
              exprNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode f = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = f; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // term ::= factor NOTEQ factor 
            {
              exprNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode l = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CSXToken op = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode r = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new binaryOpNode(l,sym.NOTEQ,r,op.linenum,op.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // term ::= factor EQ factor 
            {
              exprNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode l = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CSXToken op = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode r = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new binaryOpNode(l,sym.EQ,r,op.linenum,op.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // term ::= factor GEQ factor 
            {
              exprNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode l = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CSXToken op = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode r = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new binaryOpNode(l,sym.GEQ,r,op.linenum,op.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // term ::= factor LEQ factor 
            {
              exprNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode l = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CSXToken op = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode r = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new binaryOpNode(l,sym.LEQ,r,op.linenum,op.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // term ::= factor GT factor 
            {
              exprNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode l = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CSXToken op = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode r = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new binaryOpNode(l,sym.GT,r,op.linenum,op.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // term ::= factor LT factor 
            {
              exprNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode l = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CSXToken op = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode r = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new binaryOpNode(l,sym.LT,r,op.linenum,op.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= term 
            {
              exprNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode t = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = t; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= exp CAND term 
            {
              exprNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode l = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CSXToken op = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode r = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new binaryOpNode(l,sym.CAND,r,op.linenum,op.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= exp COR term 
            {
              exprNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode l = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CSXToken op = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode r = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new binaryOpNode(l,sym.COR,r,op.linenum,op.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // printList ::= exp 
            {
              printNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode l = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new printNode (l,new nullPrintNode(), l.linenum,l.colnum ); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*printList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // printList ::= exp COMMA printList 
            {
              printNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode l = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		printNode r = (printNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new printNode (l,r, l.linenum,l.colnum ); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*printList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // readList ::= name 
            {
              readNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		nameNode l = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new readNode(l, new nullReadNode(),  l.linenum,l.colnum ); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*readList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // readList ::= name COMMA readList 
            {
              readNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nameNode l = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		readNode r = (readNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new readNode(l,r, l.linenum,l.colnum ); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*readList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // args ::= exp 
            {
              argsNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode l = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new argsNode(l, new nullArgsNode(), l.linenum, l.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*args*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // args ::= exp COMMA args 
            {
              argsNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode l = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		argsNode r = (argsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new argsNode(l, r, l.linenum, l.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*args*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // type ::= rw_BOOL 
            {
              typeNode RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CSXToken s = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new boolTypeNode (s.linenum,s.colnum ); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // type ::= rw_CHAR 
            {
              typeNode RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CSXToken s = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new charTypeNode (s.linenum,s.colnum ); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // type ::= rw_INT 
            {
              typeNode RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CSXToken s = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new intTypeNode (s.linenum,s.colnum ); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // stmt ::= name DEC SEMI 
            {
              stmtNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int preleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int preright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CSXToken pre = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new asgNode (n, new binaryOpNode (n, sym.MINUS, new intLitNode(1, n.linenum, n.colnum), n.linenum, n.colnum), n.linenum, n.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // stmt ::= name INC SEMI 
            {
              stmtNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int preleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int preright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CSXToken pre = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new asgNode (n, new binaryOpNode (n, sym.PLUS, new intLitNode(1, n.linenum, n.colnum), n.linenum, n.colnum), n.linenum, n.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // stmt ::= DEC name SEMI 
            {
              stmtNode RESULT = null;
		int preleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int preright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CSXToken pre = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new asgNode (n, new binaryOpNode (n, sym.MINUS, new intLitNode(1, n.linenum, n.colnum), n.linenum, n.colnum), n.linenum, n.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // stmt ::= INC name SEMI 
            {
              stmtNode RESULT = null;
		int preleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int preright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CSXToken pre = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new asgNode (n, new binaryOpNode (n, sym.PLUS, new intLitNode(1, n.linenum, n.colnum), n.linenum, n.colnum), n.linenum, n.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // stmt ::= rw_FOR LPAREN name ASG exp SEMI exp SEMI name ASG exp RPAREN stmt 
            {
              stmtNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		CSXToken l = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		exprNode e1 = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		exprNode e2 = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int nsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		nameNode ns = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode e3 = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		stmtNode s = (stmtNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new forNode(n, e1,e2,e3,ns,s, l.linenum,l.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmt ::= rw_FOR LPAREN name ASG exp SEMI exp SEMI exp RPAREN stmt 
            {
              stmtNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		CSXToken l = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		exprNode e1 = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		exprNode e2 = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode e3 = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		stmtNode s = (stmtNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new forNode(n, e1,e2,e3,null, s,l.linenum,l.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt ::= LBRACE fieldDecls stmts RBRACE optionalSemi 
            {
              stmtNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CSXToken l = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fieldDeclsNode f = (fieldDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		stmtsNode s = (stmtsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new blockNode(f,s,l.linenum,l.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= rw_CONTINUE ident SEMI 
            {
              stmtNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CSXToken l = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new continueNode(i,l.linenum,l.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= rw_BREAK ident SEMI 
            {
              stmtNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CSXToken l = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new breakNode(i,l.linenum,l.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= rw_RETURN exp SEMI 
            {
              stmtNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CSXToken l = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new returnNode(e,l.linenum,l.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= rw_RETURN SEMI 
            {
              stmtNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CSXToken l = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new returnNode(new nullExprNode(),l.linenum,l.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= ident LPAREN args RPAREN SEMI 
            {
              stmtNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		argsNode a = (argsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new callNode(i,a,i.linenum,i.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= ident LPAREN RPAREN SEMI 
            {
              stmtNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new callNode(i,new nullArgsNode(),i.linenum,i.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= rw_PRINT LPAREN printList RPAREN SEMI 
            {
              stmtNode RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		printNode p = (printNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = p; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= rw_READ LPAREN readList RPAREN SEMI 
            {
              stmtNode RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		readNode r = (readNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = r; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= ident COLON rw_WHILE LPAREN exp RPAREN stmt 
            {
              stmtNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		identNode l = (identNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		stmtNode s = (stmtNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new whileNode(l,e,s,l.linenum,l.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= rw_WHILE LPAREN exp RPAREN stmt 
            {
              stmtNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CSXToken l = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		stmtNode s = (stmtNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new whileNode(new nullExprNode(),e,s,l.linenum,l.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= rw_IF LPAREN exp RPAREN stmts rw_ELSE stmts rw_ENDIF 
            {
              stmtNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		CSXToken i = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		stmtsNode s = (stmtsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		stmtsNode s2 = (stmtsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ifThenNode(e,s,s2, i.linenum, i.colnum);  
              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= rw_IF LPAREN exp RPAREN stmts rw_ENDIF 
            {
              stmtNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		CSXToken i = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		stmtsNode s = (stmtsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ifThenNode(e,s, new nullStmtsNode(), i.linenum, i.colnum);  
              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= name ASG exp SEMI 
            {
              stmtNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new asgNode(n,e,n.linenum,n.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmts ::= stmt 
            {
              stmtsNode RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		stmtNode s1 = (stmtNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new stmtsNode(s1, new nullStmtsNode(),s1.linenum,s1.colnum); 			
              CUP$parser$result = new java_cup.runtime.Symbol(1/*stmts*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmts ::= stmt stmts 
            {
              stmtsNode RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		stmtNode s1 = (stmtNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		stmtsNode s2 = (stmtsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=new stmtsNode(s1,s2,s1.linenum,s1.colnum);		
              CUP$parser$result = new java_cup.runtime.Symbol(1/*stmts*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // fieldDecl ::= rw_CONST ident ASG exp SEMI 
            {
              declNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CSXToken l = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new constDeclNode(i,e,l.linenum,l.colnum);		
              CUP$parser$result = new java_cup.runtime.Symbol(22/*fieldDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // fieldDecl ::= type ident LBRACKET INTLIT RBRACKET SEMI 
            {
              declNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CSXIntLitToken init = (CSXIntLitToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new arrayDeclNode(i,t,new intLitNode (init.intValue, init.linenum, init.colnum),t.linenum,t.colnum);	
              CUP$parser$result = new java_cup.runtime.Symbol(22/*fieldDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // fieldDecl ::= type ident ASG exp SEMI 
            {
              declNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new varDeclNode(i,t,e,t.linenum,t.colnum);	
              CUP$parser$result = new java_cup.runtime.Symbol(22/*fieldDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // fieldDecl ::= type ident SEMI 
            {
              declNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new varDeclNode(i,t,new nullExprNode(),t.linenum,t.colnum);	
              CUP$parser$result = new java_cup.runtime.Symbol(22/*fieldDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // argDecl ::= type ident LBRACKET RBRACKET 
            {
              argDeclNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		typeNode l = (typeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		identNode r = (identNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new arrayArgDeclNode(r,l,l.linenum,l.colnum ); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*argDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // argDecl ::= type ident 
            {
              argDeclNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		typeNode l = (typeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		identNode r = (identNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new valArgDeclNode(r,l,l.linenum,l.colnum ); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*argDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // argDecls ::= argDecl 
            {
              argDeclsNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		argDeclNode l = (argDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new argDeclsNode (l, new nullArgDeclsNode(), l.linenum,l.colnum ); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*argDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // argDecls ::= argDecl COMMA argDecls 
            {
              argDeclsNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		argDeclNode l = (argDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		argDeclsNode r = (argDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new argDeclsNode (l, r, l.linenum,l.colnum ); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*argDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // methodDecl ::= type ident LPAREN argDecls RPAREN LBRACE fieldDecls stmts RBRACE optionalSemi 
            {
              methodDeclNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		argDeclsNode a = (argDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fieldDeclsNode f = (fieldDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		stmtsNode s = (stmtsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new methodDeclNode(i,a,t,f,s,i.linenum,i.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*methodDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // methodDecl ::= type ident LPAREN RPAREN LBRACE fieldDecls stmts RBRACE optionalSemi 
            {
              methodDeclNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fieldDeclsNode f = (fieldDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		stmtsNode s = (stmtsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new methodDeclNode(i,new nullArgDeclsNode(),t,f,s,i.linenum,i.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*methodDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // methodDecl ::= rw_VOID ident LPAREN argDecls RPAREN LBRACE fieldDecls stmts RBRACE optionalSemi 
            {
              methodDeclNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		argDeclsNode a = (argDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fieldDeclsNode f = (fieldDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		stmtsNode s = (stmtsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new methodDeclNode(i,a,new voidTypeNode(i.linenum, i.colnum),f,s,i.linenum,i.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*methodDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // methodDecl ::= rw_VOID ident LPAREN RPAREN LBRACE fieldDecls stmts RBRACE optionalSemi 
            {
              methodDeclNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		identNode i = (identNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fieldDeclsNode f = (fieldDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		stmtsNode s = (stmtsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new methodDeclNode(i,new nullArgDeclsNode(),new voidTypeNode(i.linenum,i.colnum),f,s,i.linenum,i.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*methodDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // optionalSemi ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*optionalSemi*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // optionalSemi ::= SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*optionalSemi*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // methodDecls ::= 
            {
              methodDeclsNode RESULT = null;
		 RESULT = new nullMethodDeclsNode(); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*methodDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // methodDecls ::= methodDecl methodDecls 
            {
              methodDeclsNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		methodDeclNode l = (methodDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		methodDeclsNode r = (methodDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new methodDeclsNode(l, r, l.linenum,l.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*methodDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // fieldDecls ::= 
            {
              fieldDeclsNode RESULT = null;
		 RESULT = new nullFieldDeclsNode(); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*fieldDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // fieldDecls ::= fieldDecl fieldDecls 
            {
              fieldDeclsNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		declNode l = (declNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		fieldDeclsNode r = (fieldDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new fieldDeclsNode(l,r,l.linenum,l.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*fieldDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // memberDecls ::= methodDecls 
            {
              memberDeclsNode RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		methodDeclsNode r = (methodDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new memberDeclsNode ( new nullFieldDeclsNode(), r, r.linenum, r.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*memberDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // memberDecls ::= fieldDecl memberDecls 
            {
              memberDeclsNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		declNode l = (declNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		memberDeclsNode m = (memberDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new memberDeclsNode ( new fieldDeclsNode( l, m.fields, l.linenum, l.colnum ),m.methods,  l.linenum, l.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*memberDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= rw_CLASS ident LBRACE memberDecls RBRACE 
            {
              classNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CSXToken c = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		identNode id = (identNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		memberDeclsNode s = (memberDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new classNode (id,s, c.linenum,c.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ident ::= IDENTIFIER 
            {
              identNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CSXIdentifierToken i = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new identNode(i.identifierText, i.linenum,i.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*ident*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		classNode start_val = (classNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

